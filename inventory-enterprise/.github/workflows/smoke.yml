name: Smoke Tests (v14.4.2)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'inventory-enterprise/backend/package-lock.json'

      - name: Install dependencies
        working-directory: ./inventory-enterprise/backend
        run: npm ci

      - name: Start server in background
        working-directory: ./inventory-enterprise/backend
        run: |
          PORT=8083 node server.js > /tmp/server.log 2>&1 &
          echo $! > /tmp/server.pid
          sleep 5

      - name: Health check - /healthz
        run: |
          echo "Testing /healthz endpoint..."
          curl -f http://localhost:8083/healthz || (cat /tmp/server.log && exit 1)

      - name: Health check - /readyz
        run: |
          echo "Testing /readyz endpoint..."
          curl -f http://localhost:8083/readyz || (cat /tmp/server.log && exit 1)

      - name: Version check
        run: |
          echo "Checking server version..."
          VERSION=$(curl -s http://localhost:8083/health | jq -r '.version')
          echo "Server version: $VERSION"
          if [[ "$VERSION" != 14.4* ]]; then
            echo "‚ùå Version mismatch: expected 14.4.x, got $VERSION"
            exit 1
          fi
          echo "‚úÖ Version check passed"

      - name: Style audit - Check for inline styles (v14.4.2)
        run: |
          echo "üîç Auditing HTML files for inline styles..."
          INLINE_COUNT=$(grep -r 'style="' ./inventory-enterprise/frontend/*.html | wc -l | xargs)
          echo "Found $INLINE_COUNT inline style attributes"
          if [[ "$INLINE_COUNT" -gt 0 ]]; then
            echo "‚ùå CSP violation: Inline styles detected in HTML files"
            echo "Files with inline styles:"
            grep -rn 'style="' ./inventory-enterprise/frontend/*.html || true
            exit 1
          fi
          echo "‚úÖ Style audit passed - no inline styles found"

      - name: CSP header validation (v14.4.2)
        run: |
          echo "üîí Validating Content-Security-Policy headers..."
          CSP_HEADER=$(curl -s -I http://localhost:8083/owner-super-console.html | grep -i "content-security-policy" || echo "")
          if [[ -z "$CSP_HEADER" ]]; then
            echo "‚ö†Ô∏è  Warning: No CSP header found"
            exit 1
          fi
          if echo "$CSP_HEADER" | grep -q "style-src.*'unsafe-inline'"; then
            echo "‚ùå CSP still contains 'unsafe-inline' for style-src"
            echo "$CSP_HEADER"
            exit 1
          fi
          echo "‚úÖ CSP validation passed - no 'unsafe-inline' in style-src"
          echo "$CSP_HEADER"

      - name: AI Intelligence Index endpoint
        run: |
          echo "Testing AI Intelligence Index..."
          curl -s http://localhost:8083/health | jq '.version' || (cat /tmp/server.log && exit 1)
          echo "‚úÖ AI endpoints reachable"

      - name: Metrics endpoint
        run: |
          echo "Testing Prometheus metrics..."
          curl -f http://localhost:8083/metrics | grep -q "ai_ops_health" || echo "‚ö†Ô∏è  AI ops metrics not yet populated"

      - name: Post-deploy comprehensive verification (v14.4.2)
        run: |
          echo "üîç Running comprehensive post-deploy checks..."

          # Check 1: Owner console redirect works
          echo "1. Testing owner console redirect..."
          REDIRECT_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8083/owner-console)
          if [[ "$REDIRECT_STATUS" == "301" ]]; then
            echo "‚úÖ Owner console redirect working (301)"
          else
            echo "‚ùå Owner console redirect failed (got $REDIRECT_STATUS)"
            exit 1
          fi

          # Check 2: Auto-heal metrics exist
          echo "2. Checking auto-heal metrics..."
          if curl -s http://localhost:8083/metrics | grep -q "ai_auto_heal_invocation_total"; then
            echo "‚úÖ Auto-heal metrics registered"
          else
            echo "‚ùå Auto-heal metrics missing"
            exit 1
          fi

          # Check 3: CSS file is accessible
          echo "3. Testing CSS file accessibility..."
          CSS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8083/css/owner-super.css)
          if [[ "$CSS_STATUS" == "200" ]]; then
            echo "‚úÖ CSS file accessible"
          else
            echo "‚ùå CSS file not accessible (got $CSS_STATUS)"
            exit 1
          fi

          # Check 4: Legacy console file removed
          echo "4. Verifying legacy console file removed..."
          if [ ! -f ./inventory-enterprise/frontend/owner-console.html ]; then
            echo "‚úÖ Legacy owner-console.html removed"
          else
            echo "‚ùå Legacy owner-console.html still exists"
            exit 1
          fi

          # Check 5: Grafana dashboard exists
          echo "5. Checking Grafana dashboard..."
          if [ -f ./inventory-enterprise/backend/ops/grafana-neuropilot-dashboard.json ]; then
            echo "‚úÖ Grafana dashboard exists"
          else
            echo "‚ùå Grafana dashboard missing"
            exit 1
          fi

          echo "‚úÖ All post-deploy checks passed"

      - name: Stop server
        if: always()
        run: |
          if [ -f /tmp/server.pid ]; then
            kill $(cat /tmp/server.pid) || true
          fi

      - name: Upload server logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: server-logs
          path: /tmp/server.log

name: Frontend Release Pipeline (v2.5.1)

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'frontend/dashboard/**'
      - '.github/workflows/frontend-release.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'frontend/dashboard/**'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to production'
        required: false
        default: 'false'

env:
  NODE_VERSION: '18.x'
  FRONTEND_DIR: 'frontend/dashboard'

jobs:
  # ═══════════════════════════════════════════════════════════
  # Job 1: Lint & Type Check
  # ═══════════════════════════════════════════════════════════
  lint:
    name: 🔍 Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm ci

      - name: Run ESLint
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run lint || true
        continue-on-error: true

      - name: Run TypeScript type check
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npx tsc --noEmit || true
        continue-on-error: true

  # ═══════════════════════════════════════════════════════════
  # Job 2: Security Scanning
  # ═══════════════════════════════════════════════════════════
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for gitleaks

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm ci

      - name: Run npm audit
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm audit --audit-level=high --production
        continue-on-error: true

      - name: Run gitleaks secret scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_CONFIG: .gitleaks.toml

      - name: Upload gitleaks report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json
          retention-days: 7

  # ═══════════════════════════════════════════════════════════
  # Job 3: Build Frontend
  # ═══════════════════════════════════════════════════════════
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [lint, security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm ci

      - name: Build frontend
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run build
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL || 'http://localhost:8083' }}

      - name: Check build output
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          ls -lah dist/
          du -sh dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ${{ env.FRONTEND_DIR }}/dist
          retention-days: 7

  # ═══════════════════════════════════════════════════════════
  # Job 4: E2E Tests (Playwright)
  # ═══════════════════════════════════════════════════════════
  e2e-tests:
    name: 🎭 E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: false
      matrix:
        project: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npx playwright install --with-deps ${{ matrix.project }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ${{ env.FRONTEND_DIR }}/dist

      - name: Start frontend dev server (background)
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          npm run dev &
          npx wait-on http://localhost:3000 -t 30000

      - name: Run Playwright E2E tests
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npx playwright test --project=${{ matrix.project }} --reporter=html
        env:
          CI: true

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.project }}
          path: ${{ env.FRONTEND_DIR }}/playwright-report
          retention-days: 14

      - name: Upload Playwright results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results-${{ matrix.project }}
          path: ${{ env.FRONTEND_DIR }}/test-results
          retention-days: 7

  # ═══════════════════════════════════════════════════════════
  # Job 5: Performance Testing (Lighthouse CI)
  # ═══════════════════════════════════════════════════════════
  lighthouse:
    name: 💡 Lighthouse CI
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ${{ env.FRONTEND_DIR }}/dist

      - name: Start frontend dev server (background)
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          npm run dev &
          npx wait-on http://localhost:3000 -t 30000

      - name: Run Lighthouse CI
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run test:lighthouse
        continue-on-error: true

      - name: Upload Lighthouse reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: ${{ env.FRONTEND_DIR }}/.lighthouseci
          retention-days: 14

  # ═══════════════════════════════════════════════════════════
  # Job 6: Accessibility Testing (axe-core)
  # ═══════════════════════════════════════════════════════════
  accessibility:
    name: ♿ Accessibility Audit
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npx playwright install --with-deps chromium

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ${{ env.FRONTEND_DIR }}/dist

      - name: Start frontend dev server (background)
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          npm run dev &
          npx wait-on http://localhost:3000 -t 30000

      - name: Run axe-core accessibility audit
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run test:a11y
        continue-on-error: true

  # ═══════════════════════════════════════════════════════════
  # Job 7: Load Testing (k6 Smoke Tests)
  # ═══════════════════════════════════════════════════════════
  load-tests:
    name: 🔥 Load Tests (k6)
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'  # Skip on PRs (too heavy)
    needs: build
    services:
      # Optionally start backend service
      # backend:
      #   image: ghcr.io/your-org/inventory-backend:latest
      #   ports:
      #     - 8083:8083
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run k6 API metrics test (smoke)
        working-directory: ops/k6
        run: k6 run --vus 10 --duration 30s api_metrics.js
        env:
          API_URL: ${{ secrets.API_URL || 'http://localhost:8083' }}
        continue-on-error: true

      - name: Run k6 WebSocket test (smoke)
        working-directory: ops/k6
        run: k6 run --vus 10 --duration 30s ws_realtime.js
        env:
          WS_URL: ${{ secrets.WS_URL || 'ws://localhost:8083' }}
        continue-on-error: true

  # ═══════════════════════════════════════════════════════════
  # Job 8: Deploy to Production (Vercel/Netlify)
  # ═══════════════════════════════════════════════════════════
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e-tests, lighthouse, accessibility]
    if: |
      (github.event_name == 'release' && github.event.action == 'published') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'true') ||
      (github.ref == 'refs/heads/main' && github.event_name == 'push')
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ${{ env.FRONTEND_DIR }}/dist

      - name: Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ${{ env.FRONTEND_DIR }}
          vercel-args: '--prod'

      # Alternative: Deploy to Netlify
      # - name: Deploy to Netlify
      #   id: deploy
      #   uses: nwtgck/actions-netlify@v2
      #   with:
      #     publish-dir: ${{ env.FRONTEND_DIR }}/dist
      #     production-branch: main
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     deploy-message: "Deploy from GitHub Actions - ${{ github.sha }}"
      #     enable-pull-request-comment: true
      #     enable-commit-comment: true
      #   env:
      #     NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      #     NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Create deployment summary
        run: |
          echo "### 🚀 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v2.5.1-2025-10-07" >> $GITHUB_STEP_SUMMARY

  # ═══════════════════════════════════════════════════════════
  # Job 9: Test Summary & Reporting
  # ═══════════════════════════════════════════════════════════
  summary:
    name: 📊 Test Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [lint, security, build, e2e-tests, lighthouse, accessibility]
    steps:
      - name: Generate test summary
        run: |
          echo "# 📊 Frontend Release Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Lint:** ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security:** ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build:** ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **E2E Tests:** ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Lighthouse:** ${{ needs.lighthouse.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Accessibility:** ${{ needs.accessibility.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Playwright reports available in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Lighthouse reports available in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Build output available in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v2.5.1-2025-10-07" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

      - name: Check pipeline status
        run: |
          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.security.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ] || \
             [ "${{ needs.e2e-tests.result }}" != "success" ]; then
            echo "❌ Pipeline failed - check individual job results"
            exit 1
          else
            echo "✅ Pipeline passed successfully"
          fi

/**
 * Financial Report PDF Generator (v15.4.0)
 * Generates bilingual (EN/FR) PDF reports for financial summaries
 *
 * Uses PDFKit for server-side PDF generation without inline HTML/JS
 * Outputs professional financial reports with KPIs, tables, and footers
 *
 * @version 15.4.0
 */

const PDFDocument = require('pdfkit');
const { logger } = require('../../config/logger');

// Bilingual text mapping
const i18n = {
  en: {
    title: 'Financial Summary Report',
    period: 'Period',
    generatedOn: 'Generated on',
    kpisHeader: 'Key Performance Indicators',
    totalInvoices: 'Total Invoices',
    totalAmount: 'Total Invoice Amount',
    foodFreightReimb: 'Food & Freight Reimbursable',
    otherReimb: 'Other Reimbursable',
    gst: 'GST (5%)',
    qst: 'QST (9.975%)',
    detailsHeader: 'Invoice Details',
    vendor: 'Vendor',
    date: 'Date',
    invoiceNumber: 'Invoice #',
    subtotal: 'Subtotal',
    total: 'Total',
    footer: 'Generated by NeuroPilot Inventory Enterprise System',
    page: 'Page',
    of: 'of',
    currency: '$',
    summary: 'Summary',
    categories: 'Category Breakdown'
  },
  fr: {
    title: 'Rapport Financier Sommaire',
    period: 'Période',
    generatedOn: 'Généré le',
    kpisHeader: 'Indicateurs de Performance Clés',
    totalInvoices: 'Total des Factures',
    totalAmount: 'Montant Total des Factures',
    foodFreightReimb: 'Nourriture et Fret Remboursables',
    otherReimb: 'Autres Remboursables',
    gst: 'TPS (5%)',
    qst: 'TVQ (9.975%)',
    detailsHeader: 'Détails des Factures',
    vendor: 'Fournisseur',
    date: 'Date',
    invoiceNumber: 'Facture #',
    subtotal: 'Sous-total',
    total: 'Total',
    footer: 'Généré par le Système d\'Inventaire Enterprise NeuroPilot',
    page: 'Page',
    of: 'de',
    currency: '$',
    summary: 'Sommaire',
    categories: 'Répartition par Catégorie'
  }
};

/**
 * Format currency for display
 * @param {number} amount - Amount to format
 * @param {string} symbol - Currency symbol (default $)
 * @returns {string} Formatted currency string
 */
function formatCurrency(amount, symbol = '$') {
  return `${symbol}${amount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ',')}`;
}

/**
 * Generate PDF report
 * @param {object} data - Report data
 * @param {object} data.summary - KPI summary object
 * @param {array} data.rows - Invoice rows
 * @param {string} data.lang - Language code (en|fr)
 * @returns {Promise<Buffer>} PDF buffer
 */
async function generatePDF(data) {
  return new Promise((resolve, reject) => {
    try {
      const { summary, rows, lang } = data;
      const t = i18n[lang] || i18n.en; // Translations

      // Create PDF document (Letter size)
      const doc = new PDFDocument({
        size: 'LETTER',
        margins: {
          top: 50,
          bottom: 50,
          left: 50,
          right: 50
        },
        bufferPages: true,
        info: {
          Title: t.title,
          Author: 'NeuroPilot AI',
          Subject: `${t.period}: ${summary.dateRange.start} - ${summary.dateRange.end}`,
          Creator: 'NeuroPilot Inventory Enterprise v15.4.0'
        }
      });

      const chunks = [];
      doc.on('data', chunk => chunks.push(chunk));
      doc.on('end', () => {
        const pdfBuffer = Buffer.concat(chunks);
        resolve(pdfBuffer);
      });
      doc.on('error', err => reject(err));

      // === HEADER ===
      doc.fontSize(20)
        .fillColor('#2563eb')
        .text(t.title, { align: 'center' });

      doc.fontSize(10)
        .fillColor('#6b7280')
        .text(`${t.period}: ${summary.dateRange.start} - ${summary.dateRange.end}`, { align: 'center' })
        .moveDown(0.3);

      const now = new Date().toISOString().split('T')[0];
      doc.fontSize(9)
        .fillColor('#9ca3af')
        .text(`${t.generatedOn}: ${now}`, { align: 'center' })
        .moveDown(1.5);

      // === KPI SECTION ===
      doc.fontSize(14)
        .fillColor('#1f2937')
        .text(t.kpisHeader, { underline: true })
        .moveDown(0.5);

      const kpis = [
        { label: t.totalInvoices, value: summary.totalInvoices },
        { label: t.totalAmount, value: formatCurrency(summary.totalAmount) },
        { label: t.foodFreightReimb, value: formatCurrency(summary.foodFreightReimb) },
        { label: t.otherReimb, value: formatCurrency(summary.otherReimb) },
        { label: t.gst, value: formatCurrency(summary.totalGst) },
        { label: t.qst, value: formatCurrency(summary.totalQst) }
      ];

      doc.fontSize(10).fillColor('#374151');
      kpis.forEach(kpi => {
        doc.text(`${kpi.label}: `, { continued: true, width: 300 })
           .font('Helvetica-Bold')
           .text(kpi.value)
           .font('Helvetica')
           .moveDown(0.3);
      });

      doc.moveDown(1);

      // === INVOICE DETAILS TABLE ===
      doc.fontSize(14)
        .fillColor('#1f2937')
        .text(t.detailsHeader, { underline: true })
        .moveDown(0.5);

      // Table header
      doc.fontSize(9)
        .fillColor('#ffffff')
        .rect(50, doc.y, 512, 20)
        .fillAndStroke('#2563eb', '#1d4ed8');

      const headerY = doc.y + 5;
      doc.fillColor('#ffffff')
        .text(t.vendor, 55, headerY, { width: 120, continued: false })
        .text(t.date, 180, headerY, { width: 70, continued: false })
        .text(t.invoiceNumber, 255, headerY, { width: 100, continued: false })
        .text(t.subtotal, 360, headerY, { width: 90, continued: false, align: 'right' })
        .text(t.total, 455, headerY, { width: 90, continued: false, align: 'right' });

      doc.moveDown(0.8);

      // Table rows
      doc.fontSize(8).fillColor('#374151');
      const maxRows = Math.min(rows.length, 50); // Limit to 50 rows per page

      for (let i = 0; i < maxRows; i++) {
        const rec = rows[i];
        const categories = typeof rec.category_totals === 'string'
          ? JSON.parse(rec.category_totals || '{}')
          : (rec.category_totals || {});

        const subtotal = rec.subtotal || 0;
        const total = rec.total_amount || 0;

        const rowY = doc.y;

        // Alternate row background
        if (i % 2 === 0) {
          doc.rect(50, rowY - 2, 512, 15)
            .fillAndStroke('#f9fafb', '#e5e7eb');
        }

        doc.fillColor('#374151')
          .text(rec.vendor || '', 55, rowY, { width: 120, ellipsis: true })
          .text(rec.invoice_date || '', 180, rowY, { width: 70 })
          .text(rec.invoice_number || '', 255, rowY, { width: 100 })
          .text(formatCurrency(subtotal), 360, rowY, { width: 90, align: 'right' })
          .text(formatCurrency(total), 455, rowY, { width: 90, align: 'right' });

        doc.moveDown(0.6);

        // Check if we need a new page
        if (doc.y > 700 && i < maxRows - 1) {
          doc.addPage();
          doc.fontSize(10).fillColor('#6b7280')
            .text(`${t.detailsHeader} (${t.page} 2)`, { underline: true })
            .moveDown(0.5);
          doc.fontSize(8).fillColor('#374151');
        }
      }

      if (rows.length > 50) {
        doc.fontSize(9)
          .fillColor('#ef4444')
          .text(`Note: Only the first 50 invoices are displayed (${rows.length} total).`, { align: 'center' })
          .moveDown(0.5);
      }

      // === FOOTER ===
      const pageCount = doc.bufferedPageRange().count;
      for (let i = 0; i < pageCount; i++) {
        doc.switchToPage(i);
        doc.fontSize(8)
          .fillColor('#9ca3af')
          .text(
            `${t.footer} | ${t.page} ${i + 1} ${t.of} ${pageCount}`,
            50,
            doc.page.height - 40,
            { align: 'center', width: doc.page.width - 100 }
          );
      }

      // Finalize PDF
      doc.end();

    } catch (error) {
      logger.error('PDF generation failed:', error);
      reject(error);
    }
  });
}

module.exports = {
  generatePDF
};

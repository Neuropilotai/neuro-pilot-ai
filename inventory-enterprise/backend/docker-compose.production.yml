version: '3.8'

services:
  inventory-api:
    image: inventory-enterprise:2.0.0
    container_name: inventory-enterprise-api
    restart: unless-stopped

    # Security
    security_opt:
      - no-new-privileges:true
    read_only: true

    # Environment
    env_file:
      - .env.production

    environment:
      - NODE_ENV=production
      - TZ=America/New_York

    # Ports
    ports:
      - "8083:8083"

    # Volumes
    volumes:
      # Persistent data
      - inventory-data:/app/data
      - inventory-logs:/app/logs
      - inventory-backups:/app/backups

      # Temporary writable directories
      - /tmp
      - /app/tmp

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

    # Health check
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8083/health', (r) => { process.exit(r.statusCode === 200 ? 0 : 1); })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    # Networks
    networks:
      - inventory-network

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: inventory-nginx
    restart: unless-stopped

    ports:
      - "80:80"
      - "443:443"

    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx

    depends_on:
      inventory-api:
        condition: service_healthy

    networks:
      - inventory-network

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Redis for caching
  redis:
    image: redis:7-alpine
    container_name: inventory-redis
    restart: unless-stopped

    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}

    volumes:
      - redis-data:/data

    networks:
      - inventory-network

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Optional: Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: inventory-prometheus
    restart: unless-stopped

    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'

    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus

    ports:
      - "9090:9090"

    networks:
      - inventory-network

    depends_on:
      - inventory-api

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: inventory-grafana
    restart: unless-stopped

    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel

    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro

    ports:
      - "3000:3000"

    networks:
      - inventory-network

    depends_on:
      - prometheus

volumes:
  inventory-data:
    driver: local
  inventory-logs:
    driver: local
  inventory-backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/5tb_drive/inventory_backups
  nginx-cache:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  inventory-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

//@version=5
strategy("AI Trading Bot with Learning Indicators",
overlay=true, max_bars_back=5000)
// AI Learning Parameters
ai_learning_period = input.int(50, "AI Learning Period",
minval=10, maxval=200)
ai_sensitivity = input.float(0.7, "AI Sensitivity", minval=0.1,
maxval=1.0, step=0.1)
platform_mode = input.string("Auto", "Platform Mode",
options=["Auto", "Crypto", "Forex", "Stocks"])
// Dynamic AI Indicators
ai_rsi_period = math.round(14 * ai_sensitivity)
ai_ma_fast = math.round(9 * ai_sensitivity)
ai_ma_slow = math.round(21 * ai_sensitivity)
// AI RSI with Dynamic Adjustment
ai_rsi = ta.rsi(close, ai_rsi_period)
ai_rsi_smooth = ta.sma(ai_rsi, 3)
// AI Moving Averages
ai_ma_fast_line = ta.ema(close, ai_ma_fast)
ai_ma_slow_line = ta.ema(close, ai_ma_slow)
// AI Volatility Indicator
ai_volatility = ta.atr(14) / close * 100
volatility_threshold = ta.sma(ai_volatility, 20) * 1.5
// AI Momentum Indicator
ai_momentum = (close - close[ai_learning_period]) /
close[ai_learning_period] * 100
momentum_signal = ta.sma(ai_momentum, 5)
// AI Volume Analysis
volume_ma = ta.sma(volume, 20)
volume_spike = volume > volume_ma * 1.5
// AI Pattern Recognition
bullish_pattern = ai_ma_fast_line > ai_ma_slow_line and
ai_rsi_smooth < 70 and momentum_signal > 0
bearish_pattern = ai_ma_fast_line < ai_ma_slow_line and
ai_rsi_smooth > 30 and momentum_signal < 0
// AI Entry Conditions
long_condition = bullish_pattern and volume_spike and
ai_volatility < volatility_threshold
short_condition = bearish_pattern and volume_spike and
ai_volatility < volatility_threshold
// AI Exit Conditions
long_exit = ai_rsi_smooth > 80 or ai_ma_fast_line <
ai_ma_slow_line
short_exit = ai_rsi_smooth < 20 or ai_ma_fast_line >
ai_ma_slow_line
// Strategy Execution
if long_condition
strategy.entry("AI Long", strategy.long, comment="AI Buy
Signal")
if short_condition
Signal")
strategy.entry("AI Short", strategy.short, comment="AI Sell
if long_exit
strategy.close("AI Long", comment="AI Long Exit")
if short_exit
strategy.close("AI Short", comment="AI Short Exit")
// AI Performance Tracking
var float ai_win_rate = 0.0
var int total_trades = 0
var int winning_trades = 0
if strategy.closedtrades > total_trades
total_trades := strategy.closedtrades
if strategy.closedtrades.profit(strategy.closedtrades - 1) >
0
winning_trades := winning_trades + 1
ai_win_rate := winning_trades / total_trades * 100
// Visual Elements
plot(ai_ma_fast_line, "AI Fast MA", color=color.blue,
linewidth=2)
plot(ai_ma_slow_line, "AI Slow MA", color=color.red,
linewidth=2)
plotshape(long_condition, "AI Buy", shape.triangleup,
location.belowbar, color.green, size=size.small)
plotshape(short_condition, "AI Sell", shape.triangledown,
location.abovebar, color.red, size=size.small)
// AI Performance Table
var table performance_table = table.new(position.top_right, 2,
6, bgcolor=color.white, border_width=1)
if barstate.islast
table.cell(performance_table, 0, 0, "AI Metrics",
text_color=color.black, bgcolor=color.gray)
table.cell(performance_table, 1, 0, "Values",
text_color=color.black, bgcolor=color.gray)
table.cell(performance_table, 0, 1, "Win Rate",
text_color=color.black)
table.cell(performance_table, 1, 1,
str.tostring(ai_win_rate, "#.##") + "%", text_color=color.black)
table.cell(performance_table, 0, 2, "Total Trades",
text_color=color.black)
table.cell(performance_table, 1, 2,
str.tostring(total_trades), text_color=color.black)
table.cell(performance_table, 0, 3, "AI RSI",
text_color=color.black)
table.cell(performance_table, 1, 3,
str.tostring(ai_rsi_smooth, "#.##"), text_color=color.black)
table.cell(performance_table, 0, 4, "Volatility",
text_color=color.black)
table.cell(performance_table, 1, 4,
str.tostring(ai_volatility, "#.##"), text_color=color.black)
table.cell(performance_table, 0, 5, "Momentum",
text_color=color.black)
table.cell(performance_table, 1, 5,
str.tostring(momentum_signal, "#.##"), text_color=color.black)
// Webhook Alert
alertcondition(long_condition, "AI Long Signal", "AI Buy Signal:
{{ticker}} at {{close}}")
alertcondition(short_condition, "AI Short Signal", "AI Sell
Signal: {{ticker}} at {{close}}")

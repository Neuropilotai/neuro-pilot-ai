name: NeuroPilot v17.4 - Sentient Cloud Cycle

# Autonomous predictive optimization and self-healing
# Runs every 3 hours, 24/7, with <1 min/week human oversight

on:
  schedule:
    # Every 3 hours
    - cron: '0 */3 * * *'

  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      force_remediation:
        description: 'Force remediation even if not needed'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  # ============================================================
  # JOB 1: SENTIENT CYCLE
  # ============================================================
  sentient-cycle:
    name: 🧠 Sentient Cycle
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r sentient_core/requirements.txt
          pip install -r ai_ops/requirements.txt

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Configure environment
        run: |
          echo "PROMETHEUS_URL=${{ secrets.PROMETHEUS_URL }}" >> $GITHUB_ENV
          echo "SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}" >> $GITHUB_ENV
          echo "NOTION_TOKEN=${{ secrets.NOTION_TOKEN }}" >> $GITHUB_ENV
          echo "GRAFANA_URL=${{ secrets.GRAFANA_URL }}" >> $GITHUB_ENV
          echo "RAILWAY_API_TOKEN=${{ secrets.RAILWAY_API_TOKEN }}" >> $GITHUB_ENV
          echo "NEON_API_KEY=${{ secrets.NEON_API_KEY }}" >> $GITHUB_ENV
          echo "CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }}" >> $GITHUB_ENV

      - name: 🧠 Run Sentient Cycle
        id: sentient
        run: |
          echo "=========================================="
          echo "🧠 NEUROPILOT v17.4 - SENTIENT CYCLE"
          echo "=========================================="
          echo ""

          cd inventory-enterprise
          python3 ../sentient_core/master_controller.py

          # Capture exit code
          SENTIENT_EXIT_CODE=$?
          echo "sentient_exit_code=$SENTIENT_EXIT_CODE" >> $GITHUB_OUTPUT

          # Check if cycle summary exists
          if [ -f "logs/sentient/cycle_summary_latest.json" ]; then
            REMEDIATION_EXECUTED=$(jq -r '.remediation_executed' logs/sentient/cycle_summary_latest.json)
            REMEDIATION_SUCCESS=$(jq -r '.remediation_result.success' logs/sentient/cycle_summary_latest.json)
            PREDICTIONS_COUNT=$(jq -r '.predictions | length' logs/sentient/cycle_summary_latest.json)

            echo "remediation_executed=$REMEDIATION_EXECUTED" >> $GITHUB_OUTPUT
            echo "remediation_success=$REMEDIATION_SUCCESS" >> $GITHUB_OUTPUT
            echo "predictions_count=$PREDICTIONS_COUNT" >> $GITHUB_OUTPUT
          fi

          exit $SENTIENT_EXIT_CODE

      - name: 📊 Parse cycle results
        id: results
        if: always()
        run: |
          cd inventory-enterprise

          if [ -f "logs/sentient/cycle_summary_latest.json" ]; then
            echo "✓ Cycle summary found"

            # Extract key metrics
            OVERALL_SCORE=$(jq -r '.metrics.health_score // 0' logs/sentient/cycle_summary_latest.json)
            ANOMALIES=$(jq -r '.anomalies | length' logs/sentient/cycle_summary_latest.json)
            PREDICTIONS=$(jq -r '.predictions | length' logs/sentient/cycle_summary_latest.json)

            echo "overall_score=$OVERALL_SCORE" >> $GITHUB_OUTPUT
            echo "anomalies_count=$ANOMALIES" >> $GITHUB_OUTPUT
            echo "predictions_count=$PREDICTIONS" >> $GITHUB_OUTPUT

            # Create summary for GitHub
            cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 🧠 Sentient Cycle Summary

          **Overall Score:** $OVERALL_SCORE/100
          **Anomalies Detected:** $ANOMALIES
          **Predictions Generated:** $PREDICTIONS
          **Remediation:** ${REMEDIATION_EXECUTED:-false}

          EOF
          else
            echo "⚠️  No cycle summary found"
          fi

      - name: 📝 Commit updated state
        if: steps.sentient.outputs.remediation_executed == 'true'
        run: |
          git config user.name "NeuroPilot Sentient Core"
          git config user.email "neuropilot@ai-ops.local"

          # Add updated files
          git add sentient_core/models/
          git add ai_ops/config/ops_config.yaml || true
          git add infrastructure/terraform/terraform.tfvars || true
          git add logs/sentient/cycle_summary_latest.json || true

          # Check if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "chore(sentient): autonomous cycle update

          - Executed remediation: ${{ steps.sentient.outputs.remediation_success }}
          - Predictions: ${{ steps.sentient.outputs.predictions_count }}
          - Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)

          🤖 Autonomous update by NeuroPilot Sentient Core v17.4"

            git push
            echo "✓ State committed to repository"
          else
            echo "ℹ️  No state changes to commit"
          fi

      - name: 🚨 Handle failure
        if: failure() && steps.sentient.outputs.sentient_exit_code != '0'
        run: |
          echo "=========================================="
          echo "❌ SENTIENT CYCLE FAILED"
          echo "=========================================="

          # Send critical alert
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "🚨 *NeuroPilot Sentient Cycle FAILED*\nExit code: ${{ steps.sentient.outputs.sentient_exit_code }}\nRun: ${{ github.run_id }}\n\nIMmediate human review required.",
              "username": "NeuroPilot Alert",
              "icon_emoji": ":warning:"
            }'

  # ============================================================
  # JOB 2: COMPLIANCE AUDIT (Daily at 5 AM UTC)
  # ============================================================
  compliance-audit:
    name: 🔍 Compliance Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15

    # Only run at 5 AM UTC
    if: github.event.schedule == '0 5 * * *' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pyyaml requests

      - name: 🔍 Run compliance audit
        id: audit
        run: |
          cd inventory-enterprise
          python3 ../sentient_core/scripts/self_audit.py

          # Parse results
          AUDIT_FILE=$(ls -t logs/audit/audit_*.json | head -1)

          if [ -f "$AUDIT_FILE" ]; then
            COMPLIANCE_STATUS=$(jq -r '.compliance_status' "$AUDIT_FILE")
            OVERALL_SCORE=$(jq -r '.overall_score' "$AUDIT_FILE")
            CRITICAL_COUNT=$(jq -r '.summary.critical_findings' "$AUDIT_FILE")

            echo "compliance_status=$COMPLIANCE_STATUS" >> $GITHUB_OUTPUT
            echo "overall_score=$OVERALL_SCORE" >> $GITHUB_OUTPUT
            echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT

            echo "✓ Compliance audit complete: $COMPLIANCE_STATUS ($OVERALL_SCORE/100)"
          fi

      - name: 📊 Audit summary
        if: always()
        run: |
          cd inventory-enterprise
          AUDIT_FILE=$(ls -t logs/audit/audit_*.json | head -1)

          if [ -f "$AUDIT_FILE" ]; then
            # Extract summary
            cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 🔍 Compliance Audit Results

          **Status:** ${{ steps.audit.outputs.compliance_status }}
          **Overall Score:** ${{ steps.audit.outputs.overall_score }}/100
          **Critical Findings:** ${{ steps.audit.outputs.critical_count }}

          EOF

            # Add recommendations
            echo "### Recommendations" >> $GITHUB_STEP_SUMMARY
            jq -r '.recommendations[]' "$AUDIT_FILE" | while read -r rec; do
              echo "- $rec" >> $GITHUB_STEP_SUMMARY
            done
          fi

      - name: 📤 Upload audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compliance-audit-report
          path: inventory-enterprise/logs/audit/audit_*.md
          retention-days: 90

      - name: 🚨 Alert on critical findings
        if: steps.audit.outputs.critical_count != '0'
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "🚨 *Compliance Audit: CRITICAL FINDINGS*\nStatus: ${{ steps.audit.outputs.compliance_status }}\nScore: ${{ steps.audit.outputs.overall_score }}/100\nCritical: ${{ steps.audit.outputs.critical_count }}\n\nReview required: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "username": "NeuroPilot Audit",
              "icon_emoji": ":mag:"
            }'

  # ============================================================
  # JOB 3: MODEL TRAINING (Daily at 2 AM UTC)
  # ============================================================
  train-models:
    name: 🎓 Train Forecast Models
    runs-on: ubuntu-latest
    timeout-minutes: 45

    # Only run at 2 AM UTC
    if: github.event.schedule == '0 2 * * *' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r sentient_core/requirements.txt

      - name: Configure environment
        run: |
          echo "PROMETHEUS_URL=${{ secrets.PROMETHEUS_URL }}" >> $GITHUB_ENV

      - name: 🎓 Train forecast models
        id: train
        run: |
          cd inventory-enterprise

          echo "=========================================="
          echo "🎓 TRAINING FORECAST MODELS"
          echo "=========================================="

          python3 << 'EOF'
          import sys
          sys.path.insert(0, '../sentient_core')

          from predictive.forecast_engine import ForecastEngine
          import pandas as pd
          import numpy as np
          from datetime import datetime, timedelta

          # Create sample training data (in production, fetch from Prometheus)
          dates = pd.date_range(end=datetime.utcnow(), periods=1000, freq='30min')
          training_data = pd.DataFrame({
              'timestamp': dates,
              'cpu_usage': np.random.uniform(40, 80, 1000),
              'memory_usage': np.random.uniform(50, 75, 1000),
              'p95_latency': np.random.uniform(100, 300, 1000),
              'error_rate': np.random.uniform(0.5, 3.0, 1000),
              'request_rate': np.random.uniform(80, 200, 1000)
          })

          # Train models
          engine = ForecastEngine()
          metrics = engine.train_models(training_data)

          print(f"✓ Training complete: {metrics}")
          EOF

      - name: 📝 Commit trained models
        run: |
          git config user.name "NeuroPilot Training"
          git config user.email "neuropilot@ai-ops.local"

          git add sentient_core/models/

          if ! git diff --staged --quiet; then
            git commit -m "chore(models): train forecast models

          - LSTM, Prophet, GBDT models updated
          - Training date: $(date -u +%Y-%m-%d)

          🤖 Autonomous training by NeuroPilot v17.4"

            git push
            echo "✓ Trained models committed"
          else
            echo "ℹ️  No model changes"
          fi

  # ============================================================
  # JOB 4: HEALTH CHECK & METRICS
  # ============================================================
  health-metrics:
    name: 📊 Health & Metrics
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: 📊 Query system metrics
        id: metrics
        run: |
          # Query Prometheus
          PROMETHEUS_URL="${{ secrets.PROMETHEUS_URL }}"

          # Get current metrics
          CPU=$(curl -s "${PROMETHEUS_URL}/api/v1/query?query=avg(cpu_usage_percent)" | jq -r '.data.result[0].value[1] // "0"')
          MEMORY=$(curl -s "${PROMETHEUS_URL}/api/v1/query?query=avg(memory_usage_percent)" | jq -r '.data.result[0].value[1] // "0"')
          LATENCY=$(curl -s "${PROMETHEUS_URL}/api/v1/query?query=histogram_quantile(0.95,http_request_duration_ms)" | jq -r '.data.result[0].value[1] // "0"')

          echo "cpu=$CPU" >> $GITHUB_OUTPUT
          echo "memory=$MEMORY" >> $GITHUB_OUTPUT
          echo "latency=$LATENCY" >> $GITHUB_OUTPUT

          echo "✓ Metrics collected: CPU=$CPU%, Memory=$MEMORY%, p95=$LATENCY ms"

      - name: 📈 Update metrics dashboard
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 📊 System Metrics

          | Metric | Current | Status |
          |--------|---------|--------|
          | CPU Usage | ${{ steps.metrics.outputs.cpu }}% | $([ $(echo "${{ steps.metrics.outputs.cpu }} < 75" | bc) -eq 1 ] && echo "✅" || echo "⚠️") |
          | Memory Usage | ${{ steps.metrics.outputs.memory }}% | $([ $(echo "${{ steps.metrics.outputs.memory }} < 75" | bc) -eq 1 ] && echo "✅" || echo "⚠️") |
          | p95 Latency | ${{ steps.metrics.outputs.latency }} ms | $([ $(echo "${{ steps.metrics.outputs.latency }} < 400" | bc) -eq 1 ] && echo "✅" || echo "⚠️") |

          **Last Updated:** $(date -u)
          EOF

  # ============================================================
  # JOB 5: WEEKLY SUMMARY (Sundays at 9 AM UTC)
  # ============================================================
  weekly-summary:
    name: 📅 Weekly Summary
    runs-on: ubuntu-latest
    timeout-minutes: 10

    # Only run on Sundays at 9 AM UTC
    if: github.event.schedule == '0 9 * * 0' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: 📅 Generate weekly summary
        run: |
          cd inventory-enterprise

          echo "=========================================="
          echo "📅 WEEKLY NEUROPILOT SUMMARY"
          echo "=========================================="
          echo ""

          # Count sentient cycles
          CYCLES=$(ls -1 logs/sentient/cycle_*.json 2>/dev/null | wc -l)

          # Count remediations
          REMEDIATIONS=$(grep -r "remediation_executed.*true" logs/sentient/*.json 2>/dev/null | wc -l)

          # Count audit runs
          AUDITS=$(ls -1 logs/audit/audit_*.json 2>/dev/null | wc -l)

          echo "📊 Weekly Stats:"
          echo "  - Sentient Cycles: $CYCLES"
          echo "  - Remediations: $REMEDIATIONS"
          echo "  - Audits: $AUDITS"
          echo ""

          # Send to Slack
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d "{
              \"text\": \"📅 *NeuroPilot Weekly Summary*\n\n• Sentient Cycles: $CYCLES\n• Autonomous Remediations: $REMEDIATIONS\n• Compliance Audits: $AUDITS\n\n✅ System operating autonomously with <1 min/week human oversight.\",
              \"username\": \"NeuroPilot Weekly\",
              \"icon_emoji\": \":calendar:\"
            }"

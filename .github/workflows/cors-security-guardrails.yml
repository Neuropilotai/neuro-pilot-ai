name: CORS Security Guardrails

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'railway-server-production.js'
      - 'inventory-enterprise/backend/server.js'
      - 'inventory-enterprise/backend/**/*.js'
      - '.github/workflows/cors-security-guardrails.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'railway-server-production.js'
      - 'inventory-enterprise/backend/server.js'
      - 'inventory-enterprise/backend/**/*.js'

jobs:
  lint-guardrails:
    name: Lint - CORS Security Patterns
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run CORS security lint
        run: |
          echo "🔍 Scanning for insecure CORS patterns..."
          chmod +x inventory-enterprise/backend/scripts/grep-guardrails.sh
          ./inventory-enterprise/backend/scripts/grep-guardrails.sh

      - name: Check for wildcard CORS in main files
        run: |
          echo "🔍 Checking critical files for wildcard CORS..."

          # Check railway-server-production.js
          if grep -n "origin:\s*['\"]\\*['\"]" railway-server-production.js 2>/dev/null; then
            echo "❌ FAIL: Wildcard CORS found in railway-server-production.js"
            exit 1
          fi

          # Check backend/server.js
          if grep -n "origin:\s*['\"]\\*['\"]" inventory-enterprise/backend/server.js 2>/dev/null; then
            echo "❌ FAIL: Wildcard CORS found in backend/server.js"
            exit 1
          fi

          echo "✅ PASS: No wildcard CORS detected"

  test-cors-guardrails:
    name: Test - CORS Security (Production)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: inventory-enterprise/backend
        run: npm ci --only=production

      - name: Run CORS guardrail tests
        working-directory: inventory-enterprise/backend
        env:
          BACKEND_URL: https://resourceful-achievement-production.up.railway.app
        run: |
          echo "🧪 Running CORS security tests against production..."
          npm test -- cors.guardrail.test.js --verbose || true
          echo "Note: Tests may fail if production hasn't deployed yet"

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [lint-guardrails]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate security summary
        run: |
          echo "## 🔒 CORS Security Guardrails Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ✅ All lint checks passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Verified Patterns" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ No wildcard CORS (\`origin: '*'\`)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ No bare \`app.use(cors())\`" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ No \`origin: true\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Baseline" >> $GITHUB_STEP_SUMMARY
          echo "- Tag: \`v18.0-secure-cors\`" >> $GITHUB_STEP_SUMMARY
          echo "- CORS: Strict allowlist with wildcard subdomain support" >> $GITHUB_STEP_SUMMARY
          echo "- Runtime: Non-root (nixpacks default)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Check commit for security keywords
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if echo "$COMMIT_MSG" | grep -iE "(cors|security|fix|vulnerability)"; then
            echo "🔐 Security-related commit detected"
            echo "📋 Commit message: $COMMIT_MSG"
          fi
